require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EmployeesRolesController do

  # This should return the minimal set of attributes required to create a valid
  # EmployeesRole. As you add validations to EmployeesRole, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "role_name" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EmployeesRolesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before :each do
    sign_in_admin
  end

  describe "GET index" do
    it "assigns all employees_roles as @employees_roles" do
      employees_role = EmployeesRole.create! valid_attributes
      get :index, {}, valid_session
      assigns(:employees_roles).should eq([employees_role])
    end
  end

  describe "POST create" do
    pending do
      describe "with valid params" do
        it "creates a new EmployeesRole" do
          expect {
            post :create, {:employees_role => valid_attributes}
          }.to change(EmployeesRole, :count).by(1)
        end

        it "assigns a newly created employees_role as @employees_role" do
          post :create, {:employees_role => valid_attributes}
          assigns(:employees_role).should be_a(EmployeesRole)
          assigns(:employees_role).should be_persisted
        end

        it "redirects to the created employees_role" do
          post :create, {:employees_role => valid_attributes}
          response.should redirect_to(EmployeesRole.last)
        end
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested employees_role" do
      employees_role = EmployeesRole.create! valid_attributes
      expect {
        delete :destroy, {:id => employees_role.to_param}, valid_session
      }.to change(EmployeesRole.enabled, :count).by(-1)
    end

    it "redirects to the employees_roles list" do
      employees_role = EmployeesRole.create! valid_attributes
      delete :destroy, {:id => employees_role.to_param}, valid_session
      response.should redirect_to(employees_roles_url)
    end
  end

end
